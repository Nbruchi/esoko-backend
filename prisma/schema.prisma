// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(CUSTOMER)
  phoneNumber   String?
  profilePhoto  String?   // URL to the profile photo
  isVerified    Boolean   @default(false)
  otp           String?   // 6-digit OTP
  otpExpiry     DateTime? // OTP expiration time
  resetToken    String?
  resetTokenExpiry DateTime?
  notificationPreferences Json?    @default("{\"emailNotifications\":true,\"smsNotifications\":true,\"orderUpdates\":true,\"promotions\":true}")
  settings      Json?     @default("{\"language\":\"en\",\"currency\":\"RWF\",\"theme\":\"light\",\"timezone\":\"UTC\"}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  sellerProfile Seller?
  notifications Notification[]
  refundRequests RefundRequest[]
  wishlist      Wishlist[]
  lastLogin     DateTime?
  cart          Cart[]
  searchHistory SearchHistory[]
  refreshTokens RefreshToken[]
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  street      String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  orders      Order[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  sellerId    String
  images      String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  seller      Seller    @relation(fields: [sellerId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    Wishlist[]
  cart        Cart[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  addressId       String
  status          OrderStatus   @default(PENDING)
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  paymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  address         Address       @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  refundRequests  RefundRequest[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Seller {
  id            String    @id @default(uuid())
  userId        String    @unique
  businessName  String
  description   String?
  logo          String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  products      Product[]
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  metadata  Json?
  isRead    Boolean         @default(false)
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id])
}

model RefundRequest {
  id          String           @id @default(uuid())
  orderId     String
  userId      String
  reason      String
  status      RefundStatus     @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  order       Order            @relation(fields: [orderId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
}

model BlogPost {
  id          String    @id @default(uuid())
  title       String
  content     String
  author      String
  image       String?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model SearchHistory {
  id        String   @id @default(uuid())
  userId    String
  query     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  CASH_ON_DELIVERY
}

enum NotificationType {
  ORDER_PLACED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  REFUND_REQUESTED
  REFUND_APPROVED
  REFUND_REJECTED
  PRODUCT_REVIEW
  SELLER_VERIFICATION
  ACCOUNT_VERIFICATION
  PASSWORD_RESET
  PRICE_ALERT
  STOCK_ALERT
  SYSTEM_UPDATE
  PROMOTIONAL
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
} 